// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TRT_backend.Data;

#nullable disable

namespace TRT_backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TRT_backend.Models.Assignee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("Assignees");
                });

            modelBuilder.Entity("TRT_backend.Models.ClaimLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("LanguageId");

                    b.ToTable("ClaimLanguages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimId = 1,
                            Description = "Yeni görev oluşturma izni",
                            LanguageId = 1,
                            Name = "Görev Ekle"
                        },
                        new
                        {
                            Id = 2,
                            ClaimId = 2,
                            Description = "Görev silme izni",
                            LanguageId = 1,
                            Name = "Görev Sil"
                        },
                        new
                        {
                            Id = 3,
                            ClaimId = 3,
                            Description = "Görev başlığını değiştirme izni",
                            LanguageId = 1,
                            Name = "Görev Başlığını Düzenle"
                        },
                        new
                        {
                            Id = 4,
                            ClaimId = 4,
                            Description = "Görev açıklamasını değiştirme izni",
                            LanguageId = 1,
                            Name = "Görev Açıklamasını Düzenle"
                        },
                        new
                        {
                            Id = 5,
                            ClaimId = 5,
                            Description = "Görev durumunu değiştirme izni",
                            LanguageId = 1,
                            Name = "Görev Durumunu Düzenle"
                        },
                        new
                        {
                            Id = 6,
                            ClaimId = 6,
                            Description = "Görev atayanlarını değiştirme izni",
                            LanguageId = 1,
                            Name = "Görev Atayanları Düzenle"
                        },
                        new
                        {
                            Id = 7,
                            ClaimId = 1,
                            Description = "Permission to create new task",
                            LanguageId = 2,
                            Name = "Add Task"
                        },
                        new
                        {
                            Id = 8,
                            ClaimId = 2,
                            Description = "Permission to delete task",
                            LanguageId = 2,
                            Name = "Delete Task"
                        },
                        new
                        {
                            Id = 9,
                            ClaimId = 3,
                            Description = "Permission to edit task title",
                            LanguageId = 2,
                            Name = "Edit Task Title"
                        },
                        new
                        {
                            Id = 10,
                            ClaimId = 4,
                            Description = "Permission to edit task description",
                            LanguageId = 2,
                            Name = "Edit Task Description"
                        },
                        new
                        {
                            Id = 11,
                            ClaimId = 5,
                            Description = "Permission to edit task status",
                            LanguageId = 2,
                            Name = "Edit Task Status"
                        },
                        new
                        {
                            Id = 12,
                            ClaimId = 6,
                            Description = "Permission to edit task assignees",
                            LanguageId = 2,
                            Name = "Edit Task Assignees"
                        },
                        new
                        {
                            Id = 13,
                            ClaimId = 1,
                            Description = "Permission d'ajouter une tâche",
                            LanguageId = 3,
                            Name = "Ajouter Tâche"
                        },
                        new
                        {
                            Id = 14,
                            ClaimId = 2,
                            Description = "Permission de supprimer une tâche",
                            LanguageId = 3,
                            Name = "Supprimer Tâche"
                        },
                        new
                        {
                            Id = 15,
                            ClaimId = 3,
                            Description = "Permission de modifier le titre de la tâche",
                            LanguageId = 3,
                            Name = "Modifier Titre Tâche"
                        },
                        new
                        {
                            Id = 16,
                            ClaimId = 4,
                            Description = "Permission de modifier la description de la tâche",
                            LanguageId = 3,
                            Name = "Modifier Description Tâche"
                        },
                        new
                        {
                            Id = 17,
                            ClaimId = 5,
                            Description = "Permission de modifier le statut de la tâche",
                            LanguageId = 3,
                            Name = "Modifier Statut Tâche"
                        },
                        new
                        {
                            Id = 18,
                            ClaimId = 6,
                            Description = "Permission de modifier les assignés de la tâche",
                            LanguageId = 3,
                            Name = "Modifier Assignés Tâche"
                        });
                });

            modelBuilder.Entity("TRT_backend.Models.Claims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Claims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimName = "AddTask"
                        },
                        new
                        {
                            Id = 2,
                            ClaimName = "DeleteTask"
                        },
                        new
                        {
                            Id = 3,
                            ClaimName = "EditTaskTitle"
                        },
                        new
                        {
                            Id = 4,
                            ClaimName = "EditTaskDescription"
                        },
                        new
                        {
                            Id = 5,
                            ClaimName = "EditTaskStatus"
                        },
                        new
                        {
                            Id = 6,
                            ClaimName = "EditTaskAssignees"
                        });
                });

            modelBuilder.Entity("TRT_backend.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "tr",
                            Name = "Türkçe"
                        },
                        new
                        {
                            Id = 2,
                            Code = "en",
                            Name = "English"
                        },
                        new
                        {
                            Id = 3,
                            Code = "fr",
                            Name = "Français"
                        });
                });

            modelBuilder.Entity("TRT_backend.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromUserId")
                        .HasColumnType("int");

                    b.Property<int>("ToUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("TRT_backend.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("TRT_backend.Models.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            ClaimId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            ClaimId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            ClaimId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            ClaimId = 6,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("TRT_backend.Models.TaskCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TaskCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#007bff",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Genel görevler",
                            Name = "Genel"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#dc3545",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Acil görevler",
                            Name = "Acil"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#ffc107",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Önemli görevler",
                            Name = "Önemli"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#6c757d",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Düşük öncelikli görevler",
                            Name = "Düşük Öncelik"
                        });
                });

            modelBuilder.Entity("TRT_backend.Models.TodoTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TRT_backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            password = "admin123",
                            username = "admin"
                        });
                });

            modelBuilder.Entity("TRT_backend.Models.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClaimId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("TRT_backend.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("TRT_backend.Models.Assignee", b =>
                {
                    b.HasOne("TRT_backend.Models.TodoTask", "Task")
                        .WithMany("Assignees")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRT_backend.Models.User", "User")
                        .WithMany("Assignees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TRT_backend.Models.ClaimLanguage", b =>
                {
                    b.HasOne("TRT_backend.Models.Claims", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRT_backend.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("TRT_backend.Models.Message", b =>
                {
                    b.HasOne("TRT_backend.Models.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TRT_backend.Models.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("TRT_backend.Models.RoleClaim", b =>
                {
                    b.HasOne("TRT_backend.Models.Claims", "Claim")
                        .WithMany("RoleClaims")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRT_backend.Models.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TRT_backend.Models.TodoTask", b =>
                {
                    b.HasOne("TRT_backend.Models.TaskCategory", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TRT_backend.Models.UserClaim", b =>
                {
                    b.HasOne("TRT_backend.Models.Claims", "Claim")
                        .WithMany("UserClaims")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRT_backend.Models.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TRT_backend.Models.UserRole", b =>
                {
                    b.HasOne("TRT_backend.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TRT_backend.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TRT_backend.Models.Claims", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("TRT_backend.Models.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TRT_backend.Models.TaskCategory", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TRT_backend.Models.TodoTask", b =>
                {
                    b.Navigation("Assignees");
                });

            modelBuilder.Entity("TRT_backend.Models.User", b =>
                {
                    b.Navigation("Assignees");

                    b.Navigation("UserClaims");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
